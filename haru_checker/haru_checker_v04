#!/bin/bash

# 1. Variables
SHELL="./hsh"
OSHELL="/bin/sh"

OUTFILE1="output_1"
OUTFILE2="output_2"
ERROR_OUT1="err_out_1"
ERROR_OUT2="err_out_2"

read -p "Write the direction where your shell (compiled ver) is:
"
dir="$REPLY"

read -p "Write the name of your compiled shell. ver:
"
comp="$REPLY"

# Getting the HOME dir
printenv HOME > temp
asd=$(cat temp)
das=$(echo "$asd")

dir_sh="$das$dir/$comp"
dir_shell=$(echo $dir_sh | tr -d '~')

cp "$dir_shell" ./

read -p "Write the command which you want to prove: "
command="$REPLY"

# 2. Funciones
# run command
echo "$command" | $SHELL > $OUTFILE1 2> $ERROR_OUT1
echo "$command" | $OSHELL > $OUTFILE2 2> $ERROR_OUT2


# Showing the results of the Outputs and the Errors
# ***TEXT VARIABLES***
txt1="This is the STDOUT of OWN SHELL:"
txt2="This is the STDERR of OWN SHELL:"
txt3="This is the STDOUT of LINUX SHELL:"
txt4="This is the STDERR of LINUX SHELL:"

txt_OK="OK"
txt_KO="KO"
txt_1="The result it's the same"
txt_2="Something is fault"

# Comparing Files
# Deleting the created files with this script in the files
# OUTFILE1
sed 's/output_1//' $OUTFILE1 > temp
sed 's/output_2//' temp > $OUTFILE1
sed 's/err_out_1//' $OUTFILE1 > temp
sed 's/err_out_2//' temp > $OUTFILE1
cat $OUTFILE1 | sed '/^ *$/d' > temp
cat temp > $OUTFILE1
rm -f temp
# OUTFILE2
sed 's/output_1//' $OUTFILE2 > temp
sed 's/output_2//' temp > $OUTFILE2
sed 's/err_out_1//' $OUTFILE2 > temp
sed 's/err_out_2//' temp > $OUTFILE2
cat $OUTFILE2 | sed '/^ *$/d' > temp
cat temp > $OUTFILE2
rm -f temp
# ERROR_OUT1
sed 's!./hsh!!' $ERROR_OUT1 > temp
cat temp > $ERROR_OUT1
rm -f temp
# ERROR_OUT2
sed 's!/bin/sh!!' $ERROR_OUT2 > temp
cat temp > $ERROR_OUT2
rm -f temp

# Function that prints the comparation between both programs
checker_function(){
	# Check if the OUTFILE1 is empty
	if [ -s $OUTFILE1 ]
	then
	        echo -e "\033[33m$txt1\033[0m"
	        cat -A $OUTFILE1
	        num1=`cat $OUTFILE1 | wc -m`
	        t1="And the output have $num1 characters"
	        echo -e "\033[0m\033[5m\033[44m$t1\033[0m"
	fi
	# Check if the ERROR_OUT1 is empty
	if [ -s $ERROR_OUT1 ]
	then
	        echo -e "\033[31m$txt2\033[0m"
	        cat -A $ERROR_OUT1
	        num2=`cat $ERROR_OUT1 | wc -m`
	        t2="And the output have $num2 characters"
	        echo -e "\033[0m\033[5m\033[44m$t2\033[0m"
	fi
	echo "-------------------------------"
	# Check if the OUTFILE2 is empty
	if [ -s $OUTFILE2 ]
	then
	        echo -e "\033[33m$txt3\033[0m"
	        cat -A $OUTFILE2
	        num3=`cat $OUTFILE2 | wc -m`
	        t3="And the output have $num3 characters"
	        echo -e "\033[0m\033[5m\033[44m$t3\033[0m"
	fi
	# Check if the ERROR_OUT2 is empty
	if [ -s $ERROR_OUT2 ]
	then
	        echo -e "\033[31m$txt4\033[0m"
	        cat -A $ERROR_OUT2
	        num4=`cat $ERROR_OUT2 | wc -m`
	        t4="And the output have $num4 characters"
	        echo -e "\033[0m\033[5m\033[44m$t4\033[0m"
	fi
}

# Output Files
if cmp -s "$OUTFILE1" "$OUTFILE2";
then
        echo -e "[\033[32m\033[1m\033[5m$txt_OK\033[0m] $txt_1 in the OUTPUT FILE"
else
        echo -e "[\033[31m\033[1m\033[5m$txt_KO\033[0m] $txt_2 in the OUTPUT FILE"
	checker_function
fi
# ERROR_OUTput files
if cmp -s "$ERROR_OUT1" "$ERROR_OUT2";
then
        echo -e "[\033[32m\033[1m\033[5m$txt_OK\033[0m] $txt_1 in the ERROR FILE"
else
        echo -e "[\033[31m\033[1m\033[5m$txt_KO\033[0m] $txt_2 in the ERROR FILE"
	checker_function
fi

# clean up
rm -f $OUTFILE1
rm -f $OUTFILE2
rm -f $ERROR_OUT1
rm -f $ERROR_OUT2
rm -f $comp
